name: Deploy Azure Infrastructure

on:
  push:
    branches: [ main ]
    paths:
      - '**/*.bicep'
      - '.github/workflows/deploy-infrastructure.yml'
  workflow_dispatch:

env:
  RESOURCE_GROUP: Online-cornerRG
  LOCATION: eastus
  DNS_PREFIX: onlinecornerdns
  ACR_NAME: ocorneracr3
  DEPLOYMENT_NAME: deploy-infra-${{ github.run_number }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      - name: Install Bicep CLI
        run: |
          az bicep install
          az bicep upgrade

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Validate Bicep Template
        run: az bicep build --file ./main.bicep

      - name: Create Resource Group if it doesn't exist
        run: |
          if ! az group show --name ${{ env.RESOURCE_GROUP }} &> /dev/null; then
            az group create --name ${{ env.RESOURCE_GROUP }} --location ${{ env.LOCATION }}
          fi

      - name: Deploy Bicep Template
        id: deploy
        uses: azure/arm-deploy@v1
        with:
          scope: resourcegroup
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          resourceGroupName: ${{ env.RESOURCE_GROUP }}
          template: ./main.bicep
          parameters: |
            location=${{ env.LOCATION }}
            acrName=${{ env.ACR_NAME }}
            dnsPrefix=${{ env.DNS_PREFIX }}
            sqlServerName=online-corner-sql
            sqlDbName=eshop-db
            sqlAdminLogin=eshopadmin
            sqlAdminPassword=${{ secrets.SQL_ADMIN_PASSWORD }}
          deploymentName: ${{ env.DEPLOYMENT_NAME }}
          failOnStdErr: false

      - name: Get Deployment Outputs
        id: get_outputs
        run: |
          outputs=$(az deployment group show \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.DEPLOYMENT_NAME }} \
            --query properties.outputs)

          echo "controlPlaneFQDN=$(echo $outputs | jq -r '.controlPlaneFQDN.value // empty')" >> $GITHUB_ENV
          echo "aksClusterName=$(echo $outputs | jq -r '.aksClusterName.value // empty')" >> $GITHUB_ENV
          echo "acrName=$(echo $outputs | jq -r '.acrName.value // empty')" >> $GITHUB_ENV
          echo "appGatewayPublicIp=$(echo $outputs | jq -r '.appGatewayPublicIp.value // empty')" >> $GITHUB_ENV
          echo "webAppUrl=$(echo $outputs | jq -r '.webAppUrl.value // empty')" >> $GITHUB_ENV

      - name: Output Deployment Info
        run: |
          echo "AKS Cluster Name: $aksClusterName"
          echo "AKS Control Plane FQDN: $controlPlaneFQDN"
          echo "ACR Name: $acrName"
          echo "App Gateway Public IP: $appGatewayPublicIp"
          echo "Web App URL: https://$webAppUrl"
