name: Deploy Azure Infrastructure

on:
  push:
    branches: [ main ]
    paths:
      - '**/*.bicep'
      - '.github/workflows/deploy-infrastructure.yml'
  workflow_dispatch:

env:
  RESOURCE_GROUP: Online-cornerRG                
  LOCATION: eastus                   
  SQL_RESOURCE_GROUP: Ecommerce-SQL-RG        # Separate RG for SQL resources
  SQL_LOCATION: southafricanorth
  DNS_PREFIX: ecommerce                       # Your DNS prefix for ingress or app gateway
  ACR_NAME: ecommerceacr                      # Your Azure Container Registry name
  DEPLOYMENT_NAME: deploy-infra-${{ github.run_number }}
  SQL_DEPLOYMENT_NAME: deploy-sql-${{ github.run_number }}
  ORDER_SECRET_NAME: order-sql-secret
  PRODUCT_SECRET_NAME: product-sql-secret
  FRONTEND_WEBAPP_NAME: frontend-service      # Your Node.js frontend web app name
  ORDER_SERVICE_NAME: order-service            # .NET service namespace
  PRODUCT_SERVICE_NAME: product-service        # PHP service namespace

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Azure CLI and Bicep
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        az bicep install
        az bicep upgrade

    - name: Validate Bicep file
      run: az bicep build --file ./main.bicep

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Check/Create Main RG
      run: |
        az group show --name ${{ env.RESOURCE_GROUP }} || \
        az group create --name ${{ env.RESOURCE_GROUP }} --location ${{ env.LOCATION }}

    - name: Deploy Main Infrastructure
      id: deploy_main
      uses: azure/arm-deploy@v1
      with:
        scope: resourcegroup
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        resourceGroupName: ${{ env.RESOURCE_GROUP }}
        template: ./main.bicep
        parameters: acrName=${{ env.ACR_NAME }} dnsPrefix=${{ env.DNS_PREFIX }}
        deploymentName: "${{ env.DEPLOYMENT_NAME }}"
        failOnStdErr: false

    - name: Check/Create SQL RG
      run: |
        az group show --name ${{ env.SQL_RESOURCE_GROUP }} || \
        az group create --name ${{ env.SQL_RESOURCE_GROUP }} --location ${{ env.SQL_LOCATION }}

    - name: Deploy SQL Server + Database
      id: deploy_sql
      uses: azure/arm-deploy@v1
      with:
        scope: resourcegroup
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        resourceGroupName: ${{ env.SQL_RESOURCE_GROUP }}
        template: ./sql.bicep
        parameters: |
          sqlAdminPassword=${{ secrets.SQL_ADMIN_PASSWORD }}
          location=${{ env.SQL_LOCATION }}
        deploymentName: "${{ env.SQL_DEPLOYMENT_NAME }}"
        failOnStdErr: false

    - name: Extract SQL Connection String
      id: sql_output
      run: |
        outputs=$(az deployment group show \
          --resource-group ${{ env.SQL_RESOURCE_GROUP }} \
          --name "${{ env.SQL_DEPLOYMENT_NAME }}" \
          --query properties.outputs)
        connString=$(echo $outputs | jq -r '.sqlConnectionString.value // empty')
        echo "connection_string=$connString" >> $GITHUB_OUTPUT

    - name: Get AKS Credentials
      run: |
        aksName=$(az deployment group show --resource-group ${{ env.RESOURCE_GROUP }} --name "${{ env.DEPLOYMENT_NAME }}" --query "properties.outputs.aksClusterName.value" -o tsv)
        az aks get-credentials --name $aksName --resource-group ${{ env.RESOURCE_GROUP }} --overwrite-existing

    - name: Create Kubernetes Secret for Order Service (.NET)
      run: |
        kubectl create namespace ${{ env.ORDER_SERVICE_NAME }} --dry-run=client -o yaml | kubectl apply -f -
        kubectl create secret generic ${{ env.ORDER_SECRET_NAME }} \
          --from-literal=SQL_CONNECTION_STRING="${{ steps.sql_output.outputs.connection_string }}" \
          --namespace ${{ env.ORDER_SERVICE_NAME }} --dry-run=client -o yaml | kubectl apply -f -

    - name: Create Kubernetes Secret for Product Service (PHP)
      run: |
        kubectl create namespace ${{ env.PRODUCT_SERVICE_NAME }} --dry-run=client -o yaml | kubectl apply -f -
        kubectl create secret generic ${{ env.PRODUCT_SECRET_NAME }} \
          --from-literal=SQL_CONNECTION_STRING="${{ steps.sql_output.outputs.connection_string }}" \
          --namespace ${{ env.PRODUCT_SERVICE_NAME }} --dry-run=client -o yaml | kubectl apply -f -

    - name: Set SQL Connection String in Web App App Settings (Node.js)
      run: |
        az webapp config appsettings set \
          --name ${{ env.FRONTEND_WEBAPP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --settings SQL_CONNECTION_STRING="${{ steps.sql_output.outputs.connection_string }}"
