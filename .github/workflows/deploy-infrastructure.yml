name: Deploy Azure Infrastructure

on:
  push:
    branches: [ main ]
    paths:
      - '**/*.bicep'
      - '.github/workflows/deploy-infrastructure.yml'
  workflow_dispatch:

env:
  # App Infrastructure
  RESOURCE_GROUP: Online-cornerRG
  LOCATION: eastus
  DNS_PREFIX: onlinecorner
  ACR_NAME: ocorneracr3
  DEPLOYMENT_NAME: deploy-infra-${{ github.run_number }}

  # SQL Server
  SQL_RESOURCE_GROUP: OnlineCornerSQL-RG
  SQL_LOCATION: westus
  SQL_DEPLOYMENT_NAME: deploy-sql-${{ github.run_number }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Azure CLI and Bicep
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        az bicep install
        az bicep upgrade

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Validate Bicep files
      run: |
        az bicep build --file ./main.bicep
        az bicep build --file ./sqlserver.bicep

    - name: Create SQL Resource Group if not exists
      run: |
        az group create \
          --name ${{ env.SQL_RESOURCE_GROUP }} \
          --location ${{ env.SQL_LOCATION }}

    - name: Deploy SQL Server
      uses: azure/arm-deploy@v1
      with:
        scope: resourcegroup
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        resourceGroupName: ${{ env.SQL_RESOURCE_GROUP }}
        template: ./sqlserver.bicep
        parameters: |
          location=${{ env.SQL_LOCATION }}
          adminUsername=${{ secrets.SQL_ADMIN_USERNAME }}
          adminPassword=${{ secrets.SQL_ADMIN_PASSWORD }}
        deploymentName: ${{ env.SQL_DEPLOYMENT_NAME }}
        failOnStdErr: false

    - name: Check if App Resource Group exists
      run: |
        az group show --name ${{ env.RESOURCE_GROUP }} || echo "App resource group does not exist"

    - name: Deploy Main Infrastructure (AKS, ACR, etc.)
      uses: azure/arm-deploy@v1
      with:
        scope: resourcegroup
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        resourceGroupName: ${{ env.RESOURCE_GROUP }}
        template: ./main.bicep
        parameters: acrName=${{ env.ACR_NAME }}
        deploymentName: ${{ env.DEPLOYMENT_NAME }}
        failOnStdErr: false

    - name: Get deployment outputs
      id: outputs
      run: |
        outputs=$(az deployment group show \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name "${{ env.DEPLOYMENT_NAME }}" \
          --query properties.outputs)
        echo "controlPlaneFQDN=$(echo $outputs | jq -r '.controlPlaneFQDN.value // empty')" >> $GITHUB_OUTPUT
        echo "aksClusterName=$(echo $outputs | jq -r '.aksClusterName.value // empty')" >> $GITHUB_OUTPUT
        echo "acrName=$(echo $outputs | jq -r '.acrName.value // empty')" >> $GITHUB_OUTPUT
        echo "appGatewayPublicIp=$(echo $outputs | jq -r '.appGatewayPublicIp.value // empty')" >> $GITHUB_OUTPUT
        echo "webAppUrl=$(echo $outputs | jq -r '.webAppUrl.value // empty')" >> $GITHUB_OUTPUT

    - name: Output deployment information
      run: |
        echo "AKS Cluster Name: ${{ steps.outputs.outputs.aksClusterName }}"
        echo "AKS Control Plane FQDN: ${{ steps.outputs.outputs.controlPlaneFQDN }}"
        echo "ACR Name: ${{ steps.outputs.outputs.acrName }}"
        echo "App Gateway Public IP: ${{ steps.outputs.outputs.appGatewayPublicIp }}"
        echo "Web App URL: ${{ steps.outputs.outputs.webAppUrl }}"
